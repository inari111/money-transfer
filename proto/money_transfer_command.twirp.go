// Code generated by protoc-gen-twirp v5.5.0, DO NOT EDIT.
// source: money_transfer_command.proto

package pb

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// ==============================
// MoneyTransferCommand Interface
// ==============================

type MoneyTransferCommand interface {
	// user_idとamountを指定して送金する
	Send(context.Context, *MoneyTransferSendRequest) (*MoneyTransferSendResponse, error)
}

// ====================================
// MoneyTransferCommand Protobuf Client
// ====================================

type moneyTransferCommandProtobufClient struct {
	client HTTPClient
	urls   [1]string
}

// NewMoneyTransferCommandProtobufClient creates a Protobuf client that implements the MoneyTransferCommand interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewMoneyTransferCommandProtobufClient(addr string, client HTTPClient) MoneyTransferCommand {
	prefix := urlBase(addr) + MoneyTransferCommandPathPrefix
	urls := [1]string{
		prefix + "Send",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &moneyTransferCommandProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &moneyTransferCommandProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *moneyTransferCommandProtobufClient) Send(ctx context.Context, in *MoneyTransferSendRequest) (*MoneyTransferSendResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "money")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransferCommand")
	ctx = ctxsetters.WithMethodName(ctx, "Send")
	out := new(MoneyTransferSendResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ================================
// MoneyTransferCommand JSON Client
// ================================

type moneyTransferCommandJSONClient struct {
	client HTTPClient
	urls   [1]string
}

// NewMoneyTransferCommandJSONClient creates a JSON client that implements the MoneyTransferCommand interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewMoneyTransferCommandJSONClient(addr string, client HTTPClient) MoneyTransferCommand {
	prefix := urlBase(addr) + MoneyTransferCommandPathPrefix
	urls := [1]string{
		prefix + "Send",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &moneyTransferCommandJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &moneyTransferCommandJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *moneyTransferCommandJSONClient) Send(ctx context.Context, in *MoneyTransferSendRequest) (*MoneyTransferSendResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "money")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransferCommand")
	ctx = ctxsetters.WithMethodName(ctx, "Send")
	out := new(MoneyTransferSendResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===================================
// MoneyTransferCommand Server Handler
// ===================================

type moneyTransferCommandServer struct {
	MoneyTransferCommand
	hooks *twirp.ServerHooks
}

func NewMoneyTransferCommandServer(svc MoneyTransferCommand, hooks *twirp.ServerHooks) TwirpServer {
	return &moneyTransferCommandServer{
		MoneyTransferCommand: svc,
		hooks:                hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *moneyTransferCommandServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// MoneyTransferCommandPathPrefix is used for all URL paths on a twirp MoneyTransferCommand server.
// Requests are always: POST MoneyTransferCommandPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const MoneyTransferCommandPathPrefix = "/twirp/money.MoneyTransferCommand/"

func (s *moneyTransferCommandServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "money")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyTransferCommand")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/money.MoneyTransferCommand/Send":
		s.serveSend(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *moneyTransferCommandServer) serveSend(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSendJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSendProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyTransferCommandServer) serveSendJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Send")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MoneyTransferSendRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *MoneyTransferSendResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.MoneyTransferCommand.Send(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MoneyTransferSendResponse and nil error while calling Send. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransferCommandServer) serveSendProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Send")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(MoneyTransferSendRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *MoneyTransferSendResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.MoneyTransferCommand.Send(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MoneyTransferSendResponse and nil error while calling Send. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyTransferCommandServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor2, 0
}

func (s *moneyTransferCommandServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

var twirpFileDescriptor2 = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xc9, 0xcd, 0xcf, 0x4b,
	0xad, 0x8c, 0x2f, 0x29, 0x4a, 0xcc, 0x2b, 0x4e, 0x4b, 0x2d, 0x8a, 0x4f, 0xce, 0xcf, 0xcd, 0x4d,
	0xcc, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0xcb, 0x2a, 0x79, 0x73, 0x49,
	0xf8, 0x82, 0x18, 0x21, 0x50, 0x55, 0xc1, 0xa9, 0x79, 0x29, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5,
	0x25, 0x42, 0xe2, 0x5c, 0xec, 0xa5, 0xc5, 0xa9, 0x45, 0xf1, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0x2c, 0x41, 0x6c, 0x20, 0xae, 0x67, 0x8a, 0x90, 0x18, 0x17, 0x5b, 0x62, 0x6e, 0x7e, 0x69,
	0x5e, 0x89, 0x04, 0x13, 0x44, 0x1c, 0xc2, 0x53, 0x92, 0xe6, 0x92, 0xc4, 0x62, 0x58, 0x71, 0x41,
	0x7e, 0x5e, 0x71, 0xaa, 0x51, 0x22, 0x97, 0x08, 0x8a, 0xa4, 0x33, 0xc4, 0x39, 0x42, 0x9e, 0x5c,
	0x2c, 0x20, 0x75, 0x42, 0xf2, 0x7a, 0x60, 0x17, 0xe9, 0xe1, 0x72, 0x8e, 0x94, 0x02, 0x6e, 0x05,
	0x10, 0x2b, 0x9c, 0x58, 0xa2, 0x98, 0x0a, 0x92, 0x92, 0xd8, 0xc0, 0x1e, 0x34, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x5e, 0xd3, 0x3d, 0x32, 0x00, 0x01, 0x00, 0x00,
}
