// Code generated by protoc-gen-twirp v5.5.0, DO NOT EDIT.
// source: user_query.proto

package pb

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// ===================
// UserQuery Interface
// ===================

type UserQuery interface {
	// ユーザーを取得する
	Get(context.Context, *UserGetRequest) (*UserGetResponse, error)
}

// =========================
// UserQuery Protobuf Client
// =========================

type userQueryProtobufClient struct {
	client HTTPClient
	urls   [1]string
}

// NewUserQueryProtobufClient creates a Protobuf client that implements the UserQuery interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewUserQueryProtobufClient(addr string, client HTTPClient) UserQuery {
	prefix := urlBase(addr) + UserQueryPathPrefix
	urls := [1]string{
		prefix + "Get",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &userQueryProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &userQueryProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *userQueryProtobufClient) Get(ctx context.Context, in *UserGetRequest) (*UserGetResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user")
	ctx = ctxsetters.WithServiceName(ctx, "UserQuery")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	out := new(UserGetResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =====================
// UserQuery JSON Client
// =====================

type userQueryJSONClient struct {
	client HTTPClient
	urls   [1]string
}

// NewUserQueryJSONClient creates a JSON client that implements the UserQuery interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewUserQueryJSONClient(addr string, client HTTPClient) UserQuery {
	prefix := urlBase(addr) + UserQueryPathPrefix
	urls := [1]string{
		prefix + "Get",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &userQueryJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &userQueryJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *userQueryJSONClient) Get(ctx context.Context, in *UserGetRequest) (*UserGetResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user")
	ctx = ctxsetters.WithServiceName(ctx, "UserQuery")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	out := new(UserGetResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ========================
// UserQuery Server Handler
// ========================

type userQueryServer struct {
	UserQuery
	hooks *twirp.ServerHooks
}

func NewUserQueryServer(svc UserQuery, hooks *twirp.ServerHooks) TwirpServer {
	return &userQueryServer{
		UserQuery: svc,
		hooks:     hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *userQueryServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// UserQueryPathPrefix is used for all URL paths on a twirp UserQuery server.
// Requests are always: POST UserQueryPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const UserQueryPathPrefix = "/twirp/user.UserQuery/"

func (s *userQueryServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "user")
	ctx = ctxsetters.WithServiceName(ctx, "UserQuery")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/user.UserQuery/Get":
		s.serveGet(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *userQueryServer) serveGet(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userQueryServer) serveGetJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UserGetRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UserGetResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.UserQuery.Get(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserGetResponse and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userQueryServer) serveGetProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(UserGetRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UserGetResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.UserQuery.Get(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserGetResponse and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userQueryServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor4, 0
}

func (s *userQueryServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

var twirpFileDescriptor4 = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x2d, 0x4e, 0x2d,
	0x8a, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0x89,
	0x48, 0x71, 0x81, 0x48, 0x88, 0x88, 0x92, 0x26, 0x17, 0x5f, 0x68, 0x71, 0x6a, 0x91, 0x7b, 0x6a,
	0x49, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x38, 0x17, 0x3b, 0x58, 0x5f, 0x66, 0x8a,
	0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x1b, 0x88, 0xeb, 0x99, 0xa2, 0x64, 0xc8, 0xc5, 0x0f,
	0x57, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x24, 0xc7, 0x05, 0x36, 0x11, 0xac, 0x90, 0xdb,
	0x88, 0x4b, 0x0f, 0x6c, 0x30, 0x48, 0x51, 0x10, 0x58, 0xdc, 0xc8, 0x9e, 0x8b, 0x13, 0xc4, 0x0b,
	0x04, 0x39, 0x41, 0xc8, 0x88, 0x8b, 0xd9, 0x3d, 0xb5, 0x44, 0x48, 0x04, 0xa1, 0x0a, 0x61, 0xab,
	0x94, 0x28, 0x9a, 0x28, 0xc4, 0x02, 0x27, 0x96, 0x28, 0xa6, 0x82, 0xa4, 0x24, 0x36, 0xb0, 0x5b,
	0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xd5, 0x3c, 0x45, 0xd1, 0x00, 0x00, 0x00,
}
