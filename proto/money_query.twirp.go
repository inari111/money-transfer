// Code generated by protoc-gen-twirp v5.5.0, DO NOT EDIT.
// source: money_query.proto

package pb

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// ====================
// MoneyQuery Interface
// ====================

type MoneyQuery interface {
	// 残高を取得する
	GetBalance(context.Context, *MoneyGetBalanceRequest) (*MoneyGetBalanceResponse, error)
}

// ==========================
// MoneyQuery Protobuf Client
// ==========================

type moneyQueryProtobufClient struct {
	client HTTPClient
	urls   [1]string
}

// NewMoneyQueryProtobufClient creates a Protobuf client that implements the MoneyQuery interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewMoneyQueryProtobufClient(addr string, client HTTPClient) MoneyQuery {
	prefix := urlBase(addr) + MoneyQueryPathPrefix
	urls := [1]string{
		prefix + "GetBalance",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &moneyQueryProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &moneyQueryProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *moneyQueryProtobufClient) GetBalance(ctx context.Context, in *MoneyGetBalanceRequest) (*MoneyGetBalanceResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "money")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyQuery")
	ctx = ctxsetters.WithMethodName(ctx, "GetBalance")
	out := new(MoneyGetBalanceResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ======================
// MoneyQuery JSON Client
// ======================

type moneyQueryJSONClient struct {
	client HTTPClient
	urls   [1]string
}

// NewMoneyQueryJSONClient creates a JSON client that implements the MoneyQuery interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewMoneyQueryJSONClient(addr string, client HTTPClient) MoneyQuery {
	prefix := urlBase(addr) + MoneyQueryPathPrefix
	urls := [1]string{
		prefix + "GetBalance",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &moneyQueryJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &moneyQueryJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *moneyQueryJSONClient) GetBalance(ctx context.Context, in *MoneyGetBalanceRequest) (*MoneyGetBalanceResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "money")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyQuery")
	ctx = ctxsetters.WithMethodName(ctx, "GetBalance")
	out := new(MoneyGetBalanceResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =========================
// MoneyQuery Server Handler
// =========================

type moneyQueryServer struct {
	MoneyQuery
	hooks *twirp.ServerHooks
}

func NewMoneyQueryServer(svc MoneyQuery, hooks *twirp.ServerHooks) TwirpServer {
	return &moneyQueryServer{
		MoneyQuery: svc,
		hooks:      hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *moneyQueryServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// MoneyQueryPathPrefix is used for all URL paths on a twirp MoneyQuery server.
// Requests are always: POST MoneyQueryPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const MoneyQueryPathPrefix = "/twirp/money.MoneyQuery/"

func (s *moneyQueryServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "money")
	ctx = ctxsetters.WithServiceName(ctx, "MoneyQuery")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/money.MoneyQuery/GetBalance":
		s.serveGetBalance(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *moneyQueryServer) serveGetBalance(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetBalanceJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetBalanceProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *moneyQueryServer) serveGetBalanceJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBalance")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MoneyGetBalanceRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *MoneyGetBalanceResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.MoneyQuery.GetBalance(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MoneyGetBalanceResponse and nil error while calling GetBalance. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyQueryServer) serveGetBalanceProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetBalance")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(MoneyGetBalanceRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *MoneyGetBalanceResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.MoneyQuery.GetBalance(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MoneyGetBalanceResponse and nil error while calling GetBalance. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *moneyQueryServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *moneyQueryServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

var twirpFileDescriptor1 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0xcd, 0xcf, 0x4b,
	0xad, 0x8c, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05,
	0x0b, 0x49, 0x09, 0x43, 0x64, 0x92, 0x12, 0x73, 0x12, 0xf3, 0x92, 0x53, 0x21, 0x72, 0x4a, 0x86,
	0x5c, 0x62, 0xbe, 0x20, 0x61, 0xf7, 0xd4, 0x12, 0x27, 0x88, 0x44, 0x50, 0x6a, 0x61, 0x69, 0x6a,
	0x71, 0x89, 0x90, 0x38, 0x17, 0x7b, 0x69, 0x71, 0x6a, 0x51, 0x7c, 0x66, 0x8a, 0x04, 0xa3, 0x02,
	0xa3, 0x06, 0x4b, 0x10, 0x1b, 0x88, 0xeb, 0x99, 0xa2, 0xe4, 0xcc, 0x25, 0x8e, 0xa1, 0xa5, 0xb8,
	0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x83, 0x8b, 0x1d, 0x6a, 0x3c, 0x58, 0x0f, 0xb7, 0x11, 0x9f,
	0x1e, 0xd8, 0x52, 0x3d, 0x98, 0x42, 0x98, 0xb4, 0x51, 0x24, 0x17, 0x17, 0xd8, 0x90, 0x40, 0x90,
	0x3b, 0x85, 0xbc, 0xb9, 0xb8, 0x10, 0xa6, 0x09, 0xc9, 0x42, 0x35, 0x61, 0x77, 0x98, 0x94, 0x1c,
	0x2e, 0x69, 0x88, 0x23, 0x9c, 0x58, 0xa2, 0x98, 0x0a, 0x92, 0x92, 0xd8, 0xc0, 0xfe, 0x33, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xd0, 0xb7, 0x68, 0x10, 0x01, 0x00, 0x00,
}
