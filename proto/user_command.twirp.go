// Code generated by protoc-gen-twirp v5.5.0, DO NOT EDIT.
// source: user_command.proto

package pb

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// =====================
// UserCommand Interface
// =====================

type UserCommand interface {
	// ユーザー登録
	Register(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)

	// プロフィール更新
	UpdateProfile(context.Context, *UserUpdateProfileRequest) (*UserUpdateProfileResponse, error)
}

// ===========================
// UserCommand Protobuf Client
// ===========================

type userCommandProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewUserCommandProtobufClient creates a Protobuf client that implements the UserCommand interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewUserCommandProtobufClient(addr string, client HTTPClient) UserCommand {
	prefix := urlBase(addr) + UserCommandPathPrefix
	urls := [2]string{
		prefix + "Register",
		prefix + "UpdateProfile",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &userCommandProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &userCommandProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *userCommandProtobufClient) Register(ctx context.Context, in *UserRegisterRequest) (*UserRegisterResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user")
	ctx = ctxsetters.WithServiceName(ctx, "UserCommand")
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	out := new(UserRegisterResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommandProtobufClient) UpdateProfile(ctx context.Context, in *UserUpdateProfileRequest) (*UserUpdateProfileResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user")
	ctx = ctxsetters.WithServiceName(ctx, "UserCommand")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProfile")
	out := new(UserUpdateProfileResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =======================
// UserCommand JSON Client
// =======================

type userCommandJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewUserCommandJSONClient creates a JSON client that implements the UserCommand interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewUserCommandJSONClient(addr string, client HTTPClient) UserCommand {
	prefix := urlBase(addr) + UserCommandPathPrefix
	urls := [2]string{
		prefix + "Register",
		prefix + "UpdateProfile",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &userCommandJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &userCommandJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *userCommandJSONClient) Register(ctx context.Context, in *UserRegisterRequest) (*UserRegisterResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user")
	ctx = ctxsetters.WithServiceName(ctx, "UserCommand")
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	out := new(UserRegisterResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommandJSONClient) UpdateProfile(ctx context.Context, in *UserUpdateProfileRequest) (*UserUpdateProfileResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "user")
	ctx = ctxsetters.WithServiceName(ctx, "UserCommand")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProfile")
	out := new(UserUpdateProfileResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// UserCommand Server Handler
// ==========================

type userCommandServer struct {
	UserCommand
	hooks *twirp.ServerHooks
}

func NewUserCommandServer(svc UserCommand, hooks *twirp.ServerHooks) TwirpServer {
	return &userCommandServer{
		UserCommand: svc,
		hooks:       hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *userCommandServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// UserCommandPathPrefix is used for all URL paths on a twirp UserCommand server.
// Requests are always: POST UserCommandPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const UserCommandPathPrefix = "/twirp/user.UserCommand/"

func (s *userCommandServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "user")
	ctx = ctxsetters.WithServiceName(ctx, "UserCommand")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/user.UserCommand/Register":
		s.serveRegister(ctx, resp, req)
		return
	case "/twirp/user.UserCommand/UpdateProfile":
		s.serveUpdateProfile(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *userCommandServer) serveRegister(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userCommandServer) serveRegisterJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UserRegisterRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UserRegisterResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.UserCommand.Register(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserRegisterResponse and nil error while calling Register. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userCommandServer) serveRegisterProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Register")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(UserRegisterRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UserRegisterResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.UserCommand.Register(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserRegisterResponse and nil error while calling Register. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userCommandServer) serveUpdateProfile(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateProfileJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateProfileProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userCommandServer) serveUpdateProfileJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UserUpdateProfileRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UserUpdateProfileResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.UserCommand.UpdateProfile(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserUpdateProfileResponse and nil error while calling UpdateProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userCommandServer) serveUpdateProfileProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateProfile")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(UserUpdateProfileRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UserUpdateProfileResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.UserCommand.UpdateProfile(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UserUpdateProfileResponse and nil error while calling UpdateProfile. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userCommandServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor3, 0
}

func (s *userCommandServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

var twirpFileDescriptor3 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x2d, 0x4e, 0x2d,
	0x8a, 0x4f, 0xce, 0xcf, 0xcd, 0x4d, 0xcc, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x01, 0x89, 0x49, 0x71, 0x81, 0x48, 0x88, 0x88, 0x92, 0x28, 0x97, 0x70, 0x68, 0x71, 0x6a, 0x51,
	0x50, 0x6a, 0x7a, 0x66, 0x71, 0x09, 0x88, 0x2e, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0x32, 0xe3, 0x12,
	0x41, 0x15, 0x2e, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe3, 0x02, 0x1b, 0x21, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x6d, 0xc4, 0xa5, 0x07, 0x36, 0x09, 0xac, 0x12, 0x2c, 0xae, 0xa4, 0xc7, 0x25,
	0x01, 0xe2, 0x85, 0x16, 0xa4, 0x24, 0x96, 0xa4, 0x06, 0x14, 0xe5, 0xa7, 0x65, 0xe6, 0xa4, 0x42,
	0xcd, 0x14, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x05, 0xeb, 0xe5, 0x0c, 0x02, 0xb3, 0x95,
	0xac, 0xb9, 0x24, 0xb1, 0xa8, 0x27, 0xce, 0x32, 0xa3, 0x45, 0x8c, 0x5c, 0xdc, 0x20, 0xae, 0x33,
	0xc4, 0x8f, 0x42, 0x8e, 0x5c, 0x1c, 0x30, 0x07, 0x0b, 0x49, 0x22, 0xa9, 0x46, 0xf5, 0x9b, 0x94,
	0x14, 0x36, 0x29, 0xa8, 0x95, 0x01, 0x5c, 0xbc, 0x28, 0x6e, 0x11, 0x92, 0x43, 0x28, 0xc6, 0xe6,
	0x29, 0x29, 0x79, 0x9c, 0xf2, 0x10, 0x13, 0x9d, 0x58, 0xa2, 0x98, 0x0a, 0x92, 0x92, 0xd8, 0xc0,
	0xa1, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x3c, 0xd3, 0x71, 0x95, 0x01, 0x00, 0x00,
}
